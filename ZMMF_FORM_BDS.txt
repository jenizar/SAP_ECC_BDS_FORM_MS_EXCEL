REPORT ZMMF_BDS_JOHN NO STANDARD PAGE HEADING.

TYPE-POOLS: soi,
            sbdst.

DATA: r_document  TYPE REF TO cl_bds_document_set,
      r_excel     TYPE REF TO i_oi_spreadsheet,
      r_container TYPE REF TO cl_gui_custom_container,
      r_control   TYPE REF TO i_oi_container_control,
      r_proxy     TYPE REF TO i_oi_document_proxy,
      r_error     TYPE REF TO i_oi_error,
      wf_retcode  TYPE soi_ret_string.

DATA : d_clsnam  TYPE sbdst_classname  VALUE 'ZFORM_BDS',
       d_clstyp  TYPE sbdst_classtype  VALUE  'OT',
       d_objkey  TYPE sbdst_object_key VALUE 'ZMM_FORM',
       d_desc    TYPE char255          VALUE 'INVENTORY'.
*===================declaration data=============================
DATA : BEGIN OF t_air OCCURS 0,
         ebeln TYPE ekko-ebeln,
       END OF t_air,
       BEGIN OF t_data OCCURS 0,
         ebeln TYPE ekpo-ebeln,
         ebelp TYPE ekpo-ebelp,
         matnr TYPE ekpo-matnr,
         menge TYPE ekpo-menge,
         meins TYPE ekpo-meins,
         netwr TYPE ekpo-netwr,
       END OF t_data.
DATA : d_lines TYPE i.
data: lv_po type ekko-ebeln.

TYPES :  BEGIN OF ty_data,
         ebeln TYPE ekpo-ebeln,
         ebelp TYPE ekpo-ebelp,
         matnr TYPE ekpo-matnr,
         menge TYPE ekpo-menge,
         meins TYPE ekpo-meins,
         netwr TYPE ekpo-netwr,
       END OF ty_data.
data: ls_data type ty_data,
      lt_data type standard table of ty_data.
*================parameter====================================
PARAMETERS : p_01 TYPE ekko-ebeln.

*================declaration for bds===========================

START-OF-SELECTION.
  CALL SCREEN 2000.

END-OF-SELECTION.

*&---------------------------------------------------------------------*
*&      Form  F_GET_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_get_data.
data: lv_tot_netwr type ekpo-netwr.

  select ebeln from ekpo into table t_air where ebeln = p_01.

   select ebeln ebelp matnr menge meins netwr into table t_data from ekpo
     where ebeln eq p_01.

  lt_data[] = t_data[].
  clear lv_tot_netwr.
   loop at lt_data into ls_data.
        lv_tot_netwr = lv_tot_netwr + ls_data-netwr.
   endloop.

clear ls_data.
  append ls_data to lt_data.
  ls_data-ebeln = 'Total :'.
  ls_data-netwr = lv_tot_netwr.
  append ls_data to lt_data.

  t_data[] = lt_data[].

  DESCRIBE TABLE t_data LINES d_lines.
ENDFORM.                    " F_GET_DATA

*&---------------------------------------------------------------------*
*&      Form  F_UNPROTECT_SHEET
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_unprotect_sheet .
  DATA: loc_protect      TYPE c,
        loc_sheetname    TYPE char31.

* Check whether the sheet is protected
*  in case it's unprotected manually
  CALL METHOD r_excel->get_active_sheet
    IMPORTING
      sheetname = loc_sheetname
      error     = r_error
      retcode   = wf_retcode.

  IF r_error->has_failed = abap_true.
    CALL METHOD r_error->raise_message
      EXPORTING
        type = 'E'.
  ENDIF.

  CALL METHOD r_excel->get_protection
    EXPORTING
      sheetname = loc_sheetname   "Active sheet name
    IMPORTING
      error     = r_error
      retcode   = wf_retcode
      protect   = loc_protect.

  IF r_error->has_failed = abap_true.
    CALL METHOD r_error->raise_message
      EXPORTING
        type = 'E'.
  ELSE.
* If not protected, protect the sheet
    IF loc_protect NE abap_true.
      CALL METHOD r_excel->protect
        EXPORTING
          protect = abap_true
        IMPORTING
          error   = r_error
          retcode = wf_retcode.

      IF r_error->has_failed = abap_true.
        CALL METHOD r_error->raise_message
          EXPORTING
            type = 'E'.
      ENDIF.
    ENDIF.
  ENDIF.

* The user should not be allowed to change the primary fields.
* The sheet is protected against change and a particular range will
* be unprotected for editing

* yang bisa di edit
* Create a range to enable editing for non key fields
  PERFORM f_create_range USING 8          " Begin on 8th row
                               7          " Begin on 7th col
                               d_lines    " No of rows reqd
                               1          " Only 1 columns are editable
                               'EDIT'.    " Range name

* Unprotect the range for editing
  CALL METHOD r_excel->protect_range
    EXPORTING
      name    = 'EDIT'
      protect = space
    IMPORTING
      error   = r_error
      retcode = wf_retcode.

  IF r_error->has_failed = abap_true.
    CALL METHOD r_error->raise_message
      EXPORTING
        type = 'E'.
  ENDIF.
ENDFORM.                    " F_UNPROTECT_SHEET

*&---------------------------------------------------------------------*
*&      Form  F_CLOSE_DOCUMENT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_close_document .
* Close document
  IF NOT r_proxy IS INITIAL.
    CALL METHOD r_proxy->close_document
      IMPORTING
        error   = r_error
        retcode = wf_retcode.

    IF r_error->has_failed = abap_true.
      CALL METHOD r_error->raise_message
        EXPORTING
          type = 'E'.
    ENDIF.
  ENDIF.
ENDFORM.                    " F_CLOSE_DOCUMENT

*&---------------------------------------------------------------------*
*&      Form  F_DIS_TABLE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_dis_table.
  DATA: locint_fields TYPE TABLE OF rfc_fields.
  DATA : ld_rowt TYPE i.
*====================== PO Number =============================
  PERFORM f_create_range USING 5    " start -n- row in MS Excel
                               3    " start -n- column in MS Excel
                               1    " total row in MS Excel
                               1    " total column in MS Excel
                               'AGENTS1'.     "Range name

  IF r_error->has_failed = abap_true.
    CALL METHOD r_error->raise_message
      EXPORTING
        type = 'E'.
  ENDIF.

* Get field attributes of the table to be displayed
  CALL FUNCTION 'DP_GET_FIELDS_FROM_TABLE'
    TABLES
      data             = t_air
      fields           = locint_fields
    EXCEPTIONS
      dp_invalid_table = 1
      OTHERS           = 2.

  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

* Insert the table entries into Excel
  CALL METHOD r_excel->insert_one_table
    EXPORTING
      fields_table = locint_fields[]  "Defn of fields
      data_table   = t_air[]     "Data
      rangename    = 'AGENTS1'         "Range Name
    IMPORTING
      error        = r_error
      retcode      = wf_retcode.

  IF r_error->has_failed = abap_true.
    CALL METHOD r_error->raise_message
      EXPORTING
        type = 'E'.
  ENDIF.
*======================= data (internal table) ========================

  PERFORM f_create_range USING 8         " start -n- row in MS Excel
                               2         " start -n- column in MS Excel
                               d_lines   " total row in MS Excel
                               6         " total column in MS Excel
                               'AGENTS3'.     "Range name
* menggambar cell
* typ -> biner
* 0 -> margin kiri
* 1 -> margin atas
* 2 -> margin bawah
* 3 -> kanan
* 4 -> horizontal
* 5 -> kiri
* 6 -> garinsya tipis
* 7 -> garisnya tebal
*  7 6 5 4 3 2 1 0
*  0 1 1 1 1 1 1 1 = 127
  CALL METHOD r_excel->set_frame
    EXPORTING
      rangename = 'AGENTS3'
      typ       = 127
      color     = 1
    IMPORTING
      error     = r_error
      retcode   = wf_retcode.

  CALL METHOD r_excel->set_font
    EXPORTING
      rangename = 'AGENTS3'
      family    = 'TIMES'
      size      = 8
      bold      = 1
      italic    = 0
      align     = 1
    IMPORTING
      error     = r_error
      retcode   = wf_retcode.

  IF r_error->has_failed = abap_true.
    CALL METHOD r_error->raise_message
      EXPORTING
        type = 'E'.
  ENDIF.

* Get field attributes of the table to be displayed
  CALL FUNCTION 'DP_GET_FIELDS_FROM_TABLE'
    TABLES
      data             = t_data
      fields           = locint_fields
    EXCEPTIONS
      dp_invalid_table = 1
      OTHERS           = 2.

  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

* Insert the table entries into Excel
  CALL METHOD r_excel->insert_one_table
    EXPORTING
      fields_table = locint_fields[]  "Defn of fields
      data_table   = t_data[]     "Data
      rangename    = 'AGENTS3'         "Range Name
    IMPORTING
      error        = r_error
      retcode      = wf_retcode.

  IF r_error->has_failed = abap_true.
    CALL METHOD r_error->raise_message
      EXPORTING
        type = 'E'.
  ENDIF.

ENDFORM.                    " F_DIS_TABLE

*&---------------------------------------------------------------------*
*&      Form  F_OPEN_DOCUMENT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_D_CLSNAM  text
*      -->P_D_CLSTYP  text
*      -->P_D_OBJKEY  text
*      -->P_D_DESC  text
*----------------------------------------------------------------------*
FORM f_open_document  USING l_clsnam TYPE sbdst_classname
                            l_clstyp TYPE sbdst_classtype
                            l_objkey TYPE sbdst_object_key
                            l_desc   TYPE char255.

  DATA: locint_signature   TYPE sbdst_signature,
        locint_uris        TYPE sbdst_uri,
        locwa_signature    LIKE LINE OF locint_signature,
        locwa_uris         LIKE LINE OF locint_uris.

  IF NOT r_document IS INITIAL.
    RETURN.
  ENDIF.

* Create container control
  CALL METHOD c_oi_container_control_creator=>get_container_control
    IMPORTING
      control = r_control
      retcode = wf_retcode.

  IF wf_retcode NE c_oi_errors=>ret_ok.
    CALL METHOD c_oi_errors=>raise_message
      EXPORTING
        type = 'E'.
  ENDIF.

* Initialize Custom Control
  CREATE OBJECT r_container
    EXPORTING
      container_name = 'EXCEL_CONTROL'. "Custom Control Name

  CALL METHOD r_control->init_control
    EXPORTING
      r3_application_name      = 'EXCEL INPLACE BDS'
      inplace_enabled          = abap_true
      inplace_scroll_documents = abap_true
      parent                   = r_container
      inplace_show_toolbars    = 'X'
    IMPORTING
      retcode                  = wf_retcode.

  IF wf_retcode NE c_oi_errors=>ret_ok.
    CALL METHOD c_oi_errors=>raise_message
      EXPORTING
        type = 'E'.
  ENDIF.

* Create object for cl_bds_document_set
  CREATE OBJECT r_document.

* Get Document with URL
  locwa_signature-prop_name  = 'DESCRIPTION'.
* Description of the table template in OAOR
  locwa_signature-prop_value = l_desc.
  APPEND locwa_signature TO locint_signature.

  CALL METHOD r_document->get_with_url
    EXPORTING
      classname       = l_clsnam
      classtype       = l_clstyp
      object_key      = l_objkey
    CHANGING
      uris            = locint_uris
      signature       = locint_signature
    EXCEPTIONS
      nothing_found   = 1
      error_kpro      = 2
      internal_error  = 3
      parameter_error = 4
      not_authorized  = 5
      not_allowed     = 6.

  IF sy-subrc NE 0.
    MESSAGE 'Error Retrieving Document' TYPE 'E'.
  ENDIF.

  READ TABLE locint_uris INTO locwa_uris INDEX 1.

  CALL METHOD r_control->get_document_proxy
    EXPORTING
      document_type  = 'Excel.Sheet'
    IMPORTING
      document_proxy = r_proxy
      retcode        = wf_retcode.

  IF wf_retcode NE c_oi_errors=>ret_ok.
    CALL METHOD c_oi_errors=>show_message
      EXPORTING
        type = 'E'.
  ENDIF.

* Open Document
  CALL METHOD r_proxy->open_document
    EXPORTING
      document_url     = locwa_uris-uri
      open_inplace     = abap_true
      protect_document = abap_true "Protect Document initially
    IMPORTING
      retcode          = wf_retcode.

  IF wf_retcode NE c_oi_errors=>ret_ok.
    CALL METHOD c_oi_errors=>show_message
      EXPORTING
        type = 'E'.
  ENDIF.

* Get Excel Interface
  CALL METHOD r_proxy->get_spreadsheet_interface
    IMPORTING
      sheet_interface = r_excel
      retcode         = wf_retcode.

  IF wf_retcode NE c_oi_errors=>ret_ok.
    CALL METHOD c_oi_errors=>show_message
      EXPORTING
        type = 'E'.
  ENDIF.
ENDFORM.                    " F_OPEN_DOCUMENT

*&---------------------------------------------------------------------*
*&      Form  F_CREATE_RANGE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_8      text
*      -->P_7      text
*      -->P_D_LINES  text
*      -->P_1      text
*      -->P_0668   text
*----------------------------------------------------------------------*
FORM f_create_range  USING  l_top    TYPE i
                            l_left   TYPE i
                            l_row    TYPE i
                            l_column TYPE i
                            l_range  TYPE char255.


* Select area for entries to be displayed
  CALL METHOD r_excel->set_selection
    EXPORTING
      top     = l_top
      left    = l_left
      rows    = l_row
      columns = l_column.

  CALL METHOD r_excel->insert_range_dim
    EXPORTING
      name     = l_range
      left     = l_left
      top      = l_top
      rows     = l_row
      columns  = l_column
*     updating = 1
    IMPORTING
      error    = r_error.
  IF r_error->has_failed = abap_true.
    CALL METHOD r_error->raise_message
      EXPORTING
        type = 'E'.
  ENDIF.


ENDFORM.                    " F_CREATE_RANGE
*&---------------------------------------------------------------------*
*&      Module  STATUS_2000  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_2000 OUTPUT.
  SET PF-STATUS 'ZSTATUS'.
*  SET TITLEBAR 'xxx'.
  PERFORM f_get_data.
  PERFORM f_open_document USING d_clsnam
                                d_clstyp
                                d_objkey
                                d_desc.

  PERFORM f_dis_table.
  PERFORM f_unprotect_sheet.
ENDMODULE.                 " STATUS_2000  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_2000  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_2000 INPUT.
  CASE sy-ucomm.
    WHEN 'BACK' OR 'RW' OR '%EX'.

      LEAVE TO SCREEN 0.
      PERFORM F_CLOSE_DOCUMENT.

  ENDCASE.
ENDMODULE.                 " USER_COMMAND_2000  INPUT